'''
Created on 7 Mar 2021

A quest utilities bot.

@author: Fraser
'''
from discord.ext import commands
import discord
import os
import pickle
import asyncio
import json
from dotenv import load_dotenv
from collections import Counter

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
intents = discord.Intents(messages=True, guilds=True, members=True, reactions=True, emojis=True)
bot = commands.Bot(command_prefix='q!', intents=intents)
hunter_role = discord.Role
role_format = 'lvl'

quest_hunters = []
hunter_roles = []
total_hunters = 0

react_message = react_emoji = hunter_reaction = None

class quest_help(commands.MinimalHelpCommand):
    '''Changes help commands to use an embed.'''
    async def send_pages(self):
        destination = self.get_destination()
        emby = discord.Embed(description='')
        for page in self.paginator.pages:
            emby.description += page
        await destination.send(embed=emby)
            
bot.help_command = quest_help(no_category = 'Commands')

@bot.event
async def on_ready():
    '''Code to run on bot startup. 
    
    Takes reaction role input from a JSON file generated by the setup function.
    '''
    global react_message
    global react_emoji
    global hunter_role
    global hunter_reaction
    
    print(f'{bot.user} has connected to Discord!')
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name='the quest board'))
    
    for guild in bot.guilds:
        hunter_role = discord.utils.get(guild.roles,name='Quest Hunter')
        
    react_input = {}
    if os.path.exists('react.txt') and os.path.getsize('react.txt') != 0:
        with open('react.txt') as json_file:
            react_input = json.load(json_file)
            print(f'Successful input: {react_input}')
            react_emoji = react_input['react_emoji']
            react_channel = discord.utils.get(guild.text_channels, id=react_input['channel_id'])
            react_message = await react_channel.fetch_message(react_input['message_id'])
            hunter_reaction = discord.utils.get(react_message.reactions, emoji=react_emoji)
    else:
        print('Attempted input of invalid or empty json')
        
    
def get_hunters(ctx):
    '''Get a list of all members with the quest hunter role.'''  
    guild = ctx.channel.guild
    global quest_hunters
    for member in guild.members:
        for role in member.roles:
            if role == hunter_role:
                quest_hunters.append(member)
                
    
def format_roles(hunters):
    ''' Get a list of tuples with the number of occurrences of each level.
    
    Takes a list of members, counts the number of times each level role comes up and outputs that in a tuple where the first element is the level and the second value is the number of occurrences.
    '''
    global hunter_roles
    global total_hunters
    total_hunters = len(hunters)
    for hunter in hunters:
        for role in hunter.roles:
            hunter_roles.append(role.name)
           
    hunter_roles = dict(Counter(hunter_roles))
    hunter_roles = [(role, count) for role, count in hunter_roles.items() if role_format in role.lower()]
    hunter_roles = [(int(role[0].strip(f'{role_format} ')), role[1]) for role in hunter_roles]
    hunter_roles = sorted(hunter_roles)  

    
@bot.command(name='hunters')
async def hunters(ctx):
    '''Display the current number of hunters, broken down by level.'''
    global quest_hunters
    global hunter_roles
    global total_hunters
    
    quest_hunters = []
    hunter_roles = []
    
    get_hunters(ctx)

    format_roles(quest_hunters)
    
    result = ''
    for role in hunter_roles:
        result += f'\n**Level {role[0]} Hunters:** {role[1]}'
        
    embed = discord.Embed(title='Quest Hunter Breakdown', description=f'Total Quest Hunters: {total_hunters}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ {result}')
    embed.set_footer(text='q!hunters | Fraser') 
    await ctx.send(embed=embed)
    

async def update_react():
    '''Update the react_message and hunter_reaction variables with any new reactions.'''
    global react_message
    global hunter_reaction
    
    channel = react_message.channel
    message_id = react_message.id
    
    react_message = await channel.fetch_message(message_id)
    hunter_reaction = discord.utils.get(react_message.reactions, emoji=react_emoji)
    
    
@bot.command(name='setup')
async def setup(ctx, message_id, *channel_id):
    '''Set up a new quest hunter reaction role. Info is stored as a JSON file.'''
    global react_message 
    global react_emoji
    global hunter_reaction
    
    if channel_id:
        channel = discord.utils.get(ctx.guild.text_channels, name=channel_id[0]) 
        message = await channel.fetch_message(message_id)
    else:
        message = await ctx.fetch_message(message_id)

    react_message = message
    
    def check(reaction, user):
        return user == ctx.message.author
    
    try:
        reaction, user = await bot.wait_for('reaction_add', timeout=60.0, check=check)
    except asyncio.TimeoutError:
        print('Unsuccessful setup: Timeout')
        embed = discord.Embed(title='Timeout', description=f'Setup timed out. Please try again with `q!setup <message id>`.')
        timeout_embed = await ctx.send(embed=embed)
        await asyncio.sleep(5) 
        await timeout_embed.delete()
    else:
        react_emoji = reaction.emoji
        await react_message.add_reaction(react_emoji)
        
        await ctx.message.delete()
        
    await update_react()
        
    react_output = {'message_id':react_message.id,'channel_id':react_message.channel.id, 'react_emoji':str(react_emoji)}
    print(f'Successful setup, output: {react_output}')
        
    with open('react.txt', 'w') as outfile:
        json.dump(react_output, outfile)
        
        
@bot.command(name='reset')
async def reset(ctx):
    '''Reset the react variables and empty the text file.'''
    global react_message
    global react_emoji
    global hunter_reaction
    
    await ctx.message.delete()

    bot_message = await ctx.send(embed=discord.Embed(title='Reaction Role Reset', description=f'Are you sure you want to reset the reaction role?'))
    await bot_message.add_reaction('üëç')
    await bot_message.add_reaction('üëé')
    
    def check(reaction, user):
        return user == ctx.message.author and (str(reaction.emoji) == 'üëç' or str(reaction.emoji) == 'üëé')
    # Checks for user confirming or denying the rest
    try:
        reaction, user = await bot.wait_for('reaction_add', timeout=60.0, check=check)
    except asyncio.TimeoutError:
        print('timeout')
    else:
        if reaction.emoji == 'üëç':
            await bot_message.delete()
            # Removes bot reaction, sets all reaction variables to None and clears the text file
            await react_message.remove_reaction(react_emoji, bot.user)
            react_message = react_emoji = hunter_reaction = None
            open('react.txt', 'w').close()
            print('Successful reset')
        elif reaction.emoji == 'üëé':
            await bot_message.delete()
            

@bot.command(name='prune')
async def prune(ctx):
    '''Prune reactions from users which are no longer on the server.'''
    await ctx.message.delete()
    
    # Checks if a reaction role has been made
    #     If yes -> proceed with function
    #     If no  -> send an error message
    if (react_message is None or hunter_reaction is None):
        bot_message = await ctx.send(embed=discord.Embed(title='Reaction Role Not Found', description=f'A reaction role could not be found. Run `q!setup` to create a reaction role.'))
        await asyncio.sleep(5) 
        await bot_message.delete()
    else:
        await update_react()
        
        guild = ctx.guild
        removed_users = []
        # Gets all the members that have reacted to the message and flattens into a list
        reactors = await hunter_reaction.users().flatten()
        # Checks if members in the list have left the server, and removes their reaction if so
        for user in reactors:
            if guild.get_member(user.id) is None and user != bot.user:
                await hunter_reaction.remove(user)
                removed_users.append(user)
                print(f'{user} no longer in server.') 
                
        totalRemoved = len(removed_users)
        result = f'A total of {totalRemoved} users were detected as no longer being on the server, and their quest hunter reaction was removed.\n\n**List of Removals:**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
        for user in removed_users:
            result += f'\n{user}'
        await ctx.send(embed=discord.Embed(title='Prune Complete', description=f'{result}'))
        
       
@bot.event
async def on_raw_reaction_add(payload):
    '''Give user quest hunter role if they react to a reaction role.'''
    guild = bot.get_guild(payload.guild_id)
    user = guild.get_member(payload.user_id)

    if user != bot.user:
        if str(payload.emoji) == str(react_emoji) and payload.message_id == react_message.id: 
            await user.add_roles(hunter_role)
            print(f'{hunter_role.name} role added to {user}')
            
            
@bot.event
async def on_raw_reaction_remove(payload):
    '''Remove user quest hunter role if they remove reaction to a reaction role.'''
    guild = bot.get_guild(payload.guild_id)
    user = guild.get_member(payload.user_id)
    
    if user != bot.user and user is not None:
        if str(payload.emoji) == str(react_emoji) and payload.message_id == react_message.id: 
            await user.remove_roles(hunter_role)
            print(f'{hunter_role.name} role removed from {user}')


bot.run(TOKEN)